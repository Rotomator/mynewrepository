OOPS: object oriented programing system/structure 
====================================================
Object : real time things 
Oriented : real time based

Advantage of OOPS:
i. Support to modular approach , large application or program can be written in small set of code
ii Reusbility code 
iii. Easy to manage source code 


There are following fundamentals of oops:
-class
-object
-encapsulation 
-abstraction/data hiding
-constructor

-inheritence
-polymorphisam
-abstract class
-interface 

*access specifier 
*modifier  : static
		-can be access without object 
		-single memory allocation 
*keywords: this, final, static , super, extends, implements etc.



-class : is wrapper of data member/variable and function/methods
==================================================================

class Employee
{
	

}


-object: is an instance of class 
===============================
Employee e = new Employee();  // new is keyword , to allocate the memory 
				//Employee() : invoke to  default constructor 


-encapsulation : is wrapping data member and function in single/one unit, every class is by default encapsulated 
===============================


-abstraction/data hiding: to provide the accessbility for function and hide the defintion i.e. known as abstrtraction 
======================================


*access specifier 
=================================
keyword		within_class	in_child_class	 within_package    anywhere
--------	-----------	-------------	--------------	   ---------
private			y		n		n		n
protected		y		y		n		n
default/no keyword	y		y		y		n
public			y		y		y		y



-constructor : function will have same name as name of the class i.e function is known as constructor 
============================
-constrctor execute automatically when object will create
-constructor cannot have return type
-constructor cannot be invoke explicitilly 

There are following types of constructor :
	-default/without parameter
	-with argument
	-copy constructor 


********************************************
********************************************
	
Inheritence : to extend one class features to another class 
===============================
-Reusability of source code
-Easy to manage source code with version 

There eare following types of inheritence:
	i. Single Level : A -> B
	ii. Multi Level : A-> B -> C -> D ....
	iii. Tree	: A -> B, C-> D, E, F
	iv. Hybrid 	: A -> B ->C    , D->M, E 
	v. Multiple     : A, B, C... -> M
			: java doesn't support multiple inheritence 
			however this can be achieved using interface 


polymorphisam : multiple function have same i.e. known as polumorphisam
===============================
poly :many 
morphisam: forms 

There are two types of polymorphisam:
	i. overloading/compile time/ early binding
		: if multiple function have same name but different argument (no. of argument, types of argument)
		: overloading is dependent on return type 

	ii. overriding / run time/ late binding 
		: if multiple function have same name and same argument 
		

Example :
	BankAccount:
			-Name 
			-PAN
			-Aadhar 
			-Address Proof
			-Phone
			-Email
			-newAccount()

	SavingAccount :
			-Type of account: joint, indiv.., salary 
			-Min Balance 
			-newAccount()
			-deposit()
			-withdrawn()
			-details()
			

	CurrentAccount:
			-Type of Organization 
			-Registration NO.
			-PAN of Oraganiation 
			-Office Address..
			-Balance
			
			-newAccount()
			-deposit()
			-withdrawn()
			-details()
			


abstract class
===============================

interface 
===============================


*keywords: this, final, super, extends, implements etc.

===================================
extends	: provide one class features to another class 
super   : reference of parent class 
this	: reference of current object 
final   : readonly , constraint 













		




